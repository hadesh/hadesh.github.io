<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">

    
  <url>
    <loc>http://nevernil.com/2015/01/28/%E6%B7%BB%E5%8A%A0git%E7%9A%84commit%E4%BD%9C%E4%B8%BA%E7%89%88%E6%9C%AC%E5%8F%B7/</loc>
    <lastmod>2015-01-29T01:59:01.000Z</lastmod>
    <data>
        <display>
        <title>添加git的commit作为版本号</title>
        <pubTime>2015-01-28T09:31:46.000Z</pubTime>
        
        <tag>git </tag>
         
        <tag>shell </tag>
         
         <content><![CDATA[<p>之前使用的是svn，svn每次提交的版本号是一个数字，用来作为内部版本号，确定打出的包所对应的代码库版本。<br>后来换到git，发现git每一次commit的版本号是个哈希值。如果想要继续使用数字作为版本号的话，也是可以的，只需要计算出commit的次数就可以了。</p>
<p>获取所有分支的提交：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rev-<span class="keyword">list</span> --<span class="keyword">all</span>|wc -<span class="keyword">l</span></div></pre></td></tr></table></figure>

<p>把<code>--all</code>替换为<code>HEAD</code>，就可以获取当前分支的提交次数了。</p>
<p>其实使用commit的哈希值作为版本号也是可以的，获取最新的一次提交的哈希值的前七个字符（应该够用了），<br>这样：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rev-<span class="keyword">list</span> HEAD --abbrev-commit --<span class="built_in">max</span>-<span class="built_in">count</span>=<span class="number">1</span></div></pre></td></tr></table></figure>

<hr>
<p>这篇<a href="http://imi.im/20/" target="_blank" rel="external">文章</a>，是如何把git提交次数作为app的内部版本号的。</p>
<p>但是原文有个问题，使用了<code>CFBundleShortVersionString</code>，这个应该是应用的版本号，比如<code>2.1</code>、<code>3.0</code>，这里其实应该设置的是build号，应该使用<code>CFBundleVersion</code>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/libexec/PlistBuddy -c "Set :CFBundleVersion <span class="smartquote">`git rev-list HEAD | wc -l | awk '</span>{print $1}<span class="emphasis">'`" "${TARGET_BUILD_DIR}"/${INFOPLIST_PATH}</span></div></pre></td></tr></table></figure>

<p>这里用到了<code>PlistBuddy</code>，这是个可以对plist文件进行读写的工具，终端中执行<code>/usr/libexec/PlistBuddy -h</code>就可以查看其帮助了。</p>
<hr>
<p>对于创建framework的工程，没有info.plist文件，只能自己设置了。如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">FMK_NAME=</span>MAMapKit</div><div class="line"><span class="variable">FMK_GIT=</span>`git rev-list HEAD --abbrev-commit <span class="variable">--max-count=</span><span class="number">1</span>`</div><div class="line"><span class="variable">FMK_VERSION=</span><span class="string">"2.5.0.<span class="subst">${FMK_GIT}</span>"</span></div><div class="line"><span class="variable">INSTALL_DIR=</span>${SRCROOT}/Products/${FMK_NAME}.framework</div></pre></td></tr></table></figure>

<hr>
<p><strong>注：以上脚本需要放到target的Run Script中去执行</strong></p>
]]></content>
         
         
           
             
              <breadCrumb title="iOS" url="http://nevernil.com/categories/iOS/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://nevernil.com/2015/01/14/-bridge%E7%9B%B8%E5%85%B3/</loc>
    <lastmod>2015-01-14T09:19:59.000Z</lastmod>
    <data>
        <display>
        <title>__bridge相关</title>
        <pubTime>2015-01-14T07:08:58.000Z</pubTime>
        
        <tag>objc </tag>
         
        <tag>arc </tag>
         
         <content><![CDATA[<p>当CFObject和NSObject相互转换时，由于ARC不能管理Core Foundation对象的生命周期, 所以需要用到<code>__bridge</code>, <code>__bridge_retained</code> 和 <code>__bridge_transfer</code> 三个转换关键字。</p>
<p><strong>__bridge</strong> 只做类型转换，不修改对象生命周期的管理权；</p>
<p><strong>__bridge_retained</strong> 将Objective-C的对象转换为Core Foundation的对象，同时将对象内存的管理权交给CF，后续需要使用CFRelease或者相关方法来释放对象；</p>
<p><strong>__bridge_transfer</strong> 将Core Foundation的对象转换为Objective-C的对象，同时将对象内存的管理权交给ARC。</p>
<p><code>NSObject.h</code>中有两个方法，<code>CFBridgingRetain</code> 和 <code>CFBridgingRelease</code>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NS_INLINE CF_RETURNS_RETAINED CFTypeRef CFBridgingRetain(<span class="keyword">id</span> X) {</div><div class="line">    <span class="keyword">return</span> (__bridge_retained CFTypeRef)X;</div><div class="line">}</div><div class="line"></div><div class="line">NS_INLINE <span class="keyword">id</span> CFBridgingRelease(CFTypeRef CF_CONSUMED X) {</div><div class="line">    <span class="keyword">return</span> (__bridge_transfer <span class="keyword">id</span>)X;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>其中<code>CFBridgingRetain</code>执行后必须执行<code>CFRelease</code>来对转换的对象进行释放。</p>
]]></content>
         
         
           
             
              <breadCrumb title="iOS" url="http://nevernil.com/categories/iOS/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://nevernil.com/2015/01/05/Markdown%E5%AD%A6%E4%B9%A0/</loc>
    <lastmod>2015-01-14T08:43:49.000Z</lastmod>
    <data>
        <display>
        <title>Markdown学习</title>
        <pubTime>2015-01-05T03:53:56.000Z</pubTime>
        
        <tag>markdown </tag>
         
        <tag>blog </tag>
         
         <content><![CDATA[<h2 id="常用语法">常用语法</h2>
<h3 id="特殊字体">特殊字体</h3>
<p><code>**粗体**</code><br><strong>粗体</strong></p>
<p><code>*斜体*</code><br><em>斜体</em></p>
<h3 id="标题">标题</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># 一级标题</span></div><div class="line"><span class="preprocessor">## 二级标题</span></div><div class="line"><span class="preprocessor">### 三级标题</span></div><div class="line"><span class="preprocessor">#### 四级标题</span></div><div class="line"><span class="preprocessor">##### 五级标题</span></div><div class="line"><span class="preprocessor">###### 六级标题</span></div></pre></td></tr></table></figure>

<h3 id="引用">引用</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">&gt; 这里是引用</span></span></div><div class="line">&gt;&gt; 这里是二级引用</div><div class="line">&gt; 还是引用</div></pre></td></tr></table></figure>

<blockquote>
<p>这里是引用</p>
<blockquote>
<p>这里是二级引用<br>还是引用 </p>
</blockquote>
</blockquote>
<h3 id="列表">列表</h3>
<p>无序列表直接使用<code>*/+/-</code>作为标记。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">* red</div><div class="line">  -<span class="ruby"> red <span class="number">1</span></span></div><div class="line">  -<span class="ruby"> red <span class="number">2</span></span></div><div class="line">  -<span class="ruby"> red <span class="number">3</span></span></div><div class="line">* green</div><div class="line">* blue</div></pre></td></tr></table></figure>

<h3 id="代码区块">代码区块</h3>
<p>使用三个反引号</p>
<figure class="highlight C++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+ (Class)layerClass</div><div class="line">{</div><div class="line">    <span class="keyword">return</span> [CATiledLayer <span class="keyword">class</span>];</div><div class="line">}</div><div class="line"></div><div class="line">- (CATiledLayer *)tiledLayer</div><div class="line">{</div><div class="line">    <span class="keyword">return</span> (CATiledLayer *)self.layer;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="分割线">分割线</h3>
<p>连续三个星号（或者减号、加号）<br><code>***</code></p>
<hr>
<h3 id="绘制表格">绘制表格</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| 项目        | 价格   |  数量  |</div><div class="line">| --------   | -----<span class="symbol">:</span>  | <span class="symbol">:----</span><span class="symbol">:</span>  |</div><div class="line">| 计算机     | <span class="variable">$1600</span> |   <span class="number">5</span>     |</div><div class="line">| 手机        |   <span class="variable">$12</span>   |   <span class="number">12</span>   |</div><div class="line">| 管线        |    <span class="variable">$1</span>    |  <span class="number">234</span>  |</div></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="链接">链接</h3>
<p>链接文字以[方括号]来标记，后面紧跟(圆括号)里是实际链接地址。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">This is [<span class="link_label">an example</span>](<span class="link_url">http://example.com/ "Title"</span>) inline link.</div><div class="line">[<span class="link_label">This link</span>](<span class="link_url">http://example.net/</span>) has no title attribute.</div></pre></td></tr></table></figure>

<p>This is <a href="http://example.com/" title="Title" target="_blank" rel="external">an example</a> inline link.<br><a href="http://example.net/" target="_blank" rel="external">This link</a> has no title attribute.</p>
<h3 id="图片">图片</h3>
<p>使用 ![描述](图片链接地址) 插入图像。</p>
<p><code>![我的头像](http://hades.qiniudn.com/gragon220.png)</code></p>
<p><img src="http://hades.qiniudn.com/gragon220.png" alt="我的头像"></p>
]]></content>
         
         
           
             
              <breadCrumb title="study" url="http://nevernil.com/categories/study/"/>
          
        </display>
    </data>
    </url>

    
  <url>
    <loc>http://nevernil.com/2015/01/05/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E5%AE%9E%E7%8E%B0%E4%BA%86%E6%9F%90%E6%96%B9%E6%B3%95%E8%80%8C%E9%9D%9E%E7%BB%A7%E6%89%BF%E8%80%8C%E6%9D%A5/</loc>
    <lastmod>2015-01-05T06:15:15.000Z</lastmod>
    <data>
        <display>
        <title>判断一个对象是否实现了某方法而非继承而来</title>
        <pubTime>2015-01-05T03:05:42.000Z</pubTime>
        
        <tag>objc </tag>
         
        <tag>runtime </tag>
         
         <content><![CDATA[<p>首先需要引入<code>#import &lt;objc/runtime.h&gt;</code></p>
<figure class="highlight C++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">- (BOOL)realRespondsToSelector:(SEL)selector</div><div class="line">{</div><div class="line">    BOOL result = NO;</div><div class="line">    u_int count;</div><div class="line">    Method *methods= class_copyMethodList([self <span class="keyword">class</span>], &count);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count ; i++)</div><div class="line">    {</div><div class="line">        SEL name = method_getName(methods[i]);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (name == selector)</div><div class="line">        {</div><div class="line">            result = YES;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (methods != NULL)</div><div class="line">    {</div><div class="line">        <span class="built_in">free</span>(methods);</div><div class="line">        methods = NULL;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<p>直接使用NSObject的<code>respondsToSelector:</code>是不能判断一个方法到底是自己实现的还是其父类实现的。<br>这里用到了runtime中的<code>class_copyMethodList</code>，该方法获取到的方法列表不包括其父类的。</p>
<p>打印出对象所有的方法：</p>
<figure class="highlight C++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">u_int count;</div><div class="line">Method *methods= class_copyMethodList([self <span class="keyword">class</span>], &count);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count ; i++)</div><div class="line">{</div><div class="line">	SEL name = method_getName(methods[i]);</div><div class="line">	NSString *strName = [NSString  stringWithCString:sel_getName(name) encoding:NSUTF8StringEncoding];</div><div class="line">	NSLog(@<span class="string">"%@: %@"</span>, [self <span class="keyword">class</span>], strName);</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
         
         
           
             
              <breadCrumb title="iOS" url="http://nevernil.com/categories/iOS/"/>
          
        </display>
    </data>
    </url>

    
    
  <url>
    <loc>http://nevernil.com/2015/01/04/Hello-world/</loc>
    <lastmod>2015-01-04T06:07:50.000Z</lastmod>
    <data>
        <display>
        <title>Hello world</title>
        <pubTime>2015-01-04T05:53:28.000Z</pubTime>
        
         <content><![CDATA[<h3 id="开始">开始</h3>
<p>折腾了几天，中间还有个元旦，终于把博客弄好了，准备开搞！<br>let the hunt begin!</p>
]]></content>
         
         
           
             
              <breadCrumb title="others" url="http://nevernil.com/categories/others/"/>
          
        </display>
    </data>
    </url>

</urlset>
